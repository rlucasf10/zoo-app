# web-app-deployment-service.yaml

# Despliegue de la aplicación web (PHP)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zoo-app-web
  labels:
    app: zoo-app
    tier: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zoo-app
      tier: frontend
  template:
    metadata:
      labels:
        app: zoo-app
        tier: frontend
    spec:
      containers:
        - name: php-app
          # Tu imagen de Docker Hub (rlucasf10/zoo-app-web:latest)
          image: rlucasf10/zoo-app-web:latest
          ports:
            - containerPort: 80 # El puerto que tu aplicación web escucha

          # La sección 'env:' se ha eliminado por completo.
          # Tus variables de entorno se leerán del archivo .env montado
          # desde el Secret 'zoo-app-env-file'.

          volumeMounts:
            # Monta el Secret 'zoo-app-env-file' como un archivo .env
            - name: env-file-volume
              mountPath: /var/www/html/zoo-app/.env # Ruta donde tu aplicación espera el .env
              subPath: .env # Monta el contenido de la clave '.env' del Secret como un archivo

      volumes: # <--- ¡IMPORTANTE! Esta sección ahora está en el nivel correcto (al mismo nivel que 'containers')
        # Define el volumen que usará el Secret 'zoo-app-env-file'
        - name: env-file-volume
          secret:
            secretName: zoo-app-env-file # Nombre del Secret creado con 'kubectl create secret ... --from-file=.env'

---

# Servicio de la aplicación web - Para exponerla al exterior o a otros servicios
apiVersion: v1
kind: Service
metadata:
  name: zoo-app-web
  labels:
    app: zoo-app
    tier: frontend
spec:
  type: ClusterIP # NodePort para acceder desde fuera del clúster
  ports:
    - protocol: TCP
      port: 80 # Puerto del servicio
      targetPort: 80 # Puerto del contenedor al que se mapea
      # La línea 'nodePort: 30080' se ELIMINA porque ya no es NodePort
  selector:
    app: zoo-app
    tier: frontend # Selecciona los pods que tienen esta etiqueta
